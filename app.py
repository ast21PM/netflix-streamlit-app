import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import subprocess
import sys
import os

try:
    import matplotlib.pyplot as plt
except ImportError:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "matplotlib"])
    import matplotlib.pyplot as plt

@st.cache_data
def load_data():
    try:
        file_path = 'data/netflix_titles.csv'
        
        if not os.path.exists(file_path):
            st.error(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return pd.DataFrame()
            
        df = pd.read_csv(file_path)
        
        if 'country' not in df.columns:
            df['country'] = 'Unknown'
            
        return df
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        return pd.DataFrame()

df = load_data()

if not isinstance(df, pd.DataFrame):
    st.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DataFrame")
    st.stop()

st.set_page_config(page_title="Netflix Analytics", layout="wide")
st.title("üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Netflix")
st.markdown("""
–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ Netflix —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ Kaggle.
* –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: [Netflix Movies and TV Shows](https://www.kaggle.com/datasets/shivamb/netflix-shows)
* –ê–≤—Ç–æ—Ä: [ast_57]
""")

with st.sidebar:
    st.header("–§–∏–ª—å—Ç—Ä—ã")

    min_year = 1940
    max_year = 2022
    
    if not df.empty:
        min_year = int(df['release_year'].min()) if 'release_year' in df.columns else 1940
        max_year = int(df['release_year'].max()) if 'release_year' in df.columns else 2022

    year_range = st.slider(
        "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞",
        min_year, max_year,
        (max(min_year, 2010), max_year)
    )
    
    countries = ['All'] + sorted(df['country'].dropna().unique().tolist()) if 'country' in df.columns else ['All']
    selected_countries = st.multiselect(
        "–°—Ç—Ä–∞–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
        options=countries,
        default=['All']
    )

    selected_type = st.selectbox("–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞", options=['All', 'Movie', 'TV Show'])
    
    show_stats = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")


try:
    filtered_data = df.copy()
    

    if selected_type != 'All' and 'type' in filtered_data.columns:
        filtered_data = filtered_data[filtered_data['type'] == selected_type]
    

    if 'release_year' in filtered_data.columns:
        filtered_data = filtered_data[
            filtered_data['release_year'].between(year_range[0], year_range[1])
        ]
    else:
        st.warning("–°—Ç–æ–ª–±–µ—Ü 'release_year' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω.")
    

    if 'All' not in selected_countries and 'country' in filtered_data.columns:
        filtered_data = filtered_data[filtered_data['country'].isin(selected_countries)]
    

    if search_query:
        if 'title' in filtered_data.columns:
            try:
                filtered_data = filtered_data[
                    filtered_data['title'].str.contains(search_query, case=False, na=False)
                ]
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
        else:
            st.warning("–°—Ç–æ–ª–±–µ—Ü 'title' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ. –ü–æ–∏—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
    else:
        st.info("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.")

except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
    filtered_data = df.copy()


col1, col2, col3 = st.columns(3)
with col1:
    st.metric("–í—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", len(filtered_data))

with col2:
    if selected_type == 'Movie' and 'duration' in filtered_data.columns:
        try:
            duration = filtered_data['duration'].str.extract(r'(\d+)').astype(float)
            avg_duration = duration.mean()
            st.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{avg_duration:.1f} –º–∏–Ω" if pd.notna(avg_duration) else "N/A")
        except Exception as e:
            st.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "N/A")
            st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {str(e)}")
    else:
        st.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "N/A")

with col3:
    release_year = filtered_data['release_year'].min() if not filtered_data.empty else "N/A"
    st.metric("–°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ä–µ–ª–∏–∑", release_year)


st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º")
if not filtered_data.empty and 'rating' in filtered_data.columns:
    try:
        fig, ax = plt.subplots()
        filtered_data['rating'].value_counts().plot(kind='bar', ax=ax)
        ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º")
        ax.set_xlabel("–†–µ–π—Ç–∏–Ω–≥")
        ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        st.pyplot(fig)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {str(e)}")
else:
    st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")


st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
if not filtered_data.empty:
    st.write(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_data)} –∑–∞–ø–∏—Å–µ–π")
    st.dataframe(filtered_data)
else:
    st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º.")