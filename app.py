import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import subprocess
import sys


try:
    import matplotlib.pyplot as plt
except ImportError:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "matplotlib"])
    import matplotlib.pyplot as plt

@st.cache_data
def load_data():
    try:
        df = pd.read_csv('data/netflix_titles.csv')

        if 'country' not in df.columns:
            df['country'] = 'Unknown'
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return pd.DataFrame()

df = load_data()

if df.empty:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª data/netflix_titles.csv")
    st.stop()

st.set_page_config(page_title="Netflix Analytics", layout="wide")
st.title("üìä Netflix Content Analysis Dashboard")
st.markdown("""
–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ Netflix —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ Kaggle.
* **–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:** [Netflix Movies and TV Shows](https://www.kaggle.com/datasets/shivamb/netflix-shows)
* **–ê–≤—Ç–æ—Ä:** [ast_57]
""")

with st.sidebar:
    st.header("–§–∏–ª—å—Ç—Ä—ã")
    

    selected_type = st.selectbox(
        "–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        ['All', 'Movie', 'TV Show'],
        index=0
    )
    

    min_year = df['release_year'].min() if not df.empty else 1940
    max_year = df['release_year'].max() if not df.empty else 2022
    year_range = st.slider(
        "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞",
        int(min_year), int(max_year),
        (max(int(min_year), 2010), int(max_year))
    )
    

    countries = ['All'] + sorted(df['country'].dropna().unique().tolist()) if 'country' in df.columns else ['All']
    selected_countries = st.multiselect(
        "–°—Ç—Ä–∞–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
        options=countries,
        default=['All']
    )

    show_stats = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")


try:
    filtered_data = df.copy()
    

    if selected_type != 'All':
        filtered_data = filtered_data[filtered_data['type'] == selected_type]
    

    filtered_data = filtered_data[
        filtered_data['release_year'].between(year_range[0], year_range[1])
    ]
    

    if 'All' not in selected_countries and 'country' in filtered_data.columns:
        filtered_data = filtered_data[filtered_data['country'].isin(selected_countries)]
    

    if search_query and 'title' in filtered_data.columns:
        filtered_data = filtered_data[
            filtered_data['title'].str.contains(search_query, case=False, na=False)
        ]

except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
    filtered_data = df.copy()


col1, col2, col3 = st.columns(3)
with col1:
    st.metric("–í—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", len(filtered_data))

with col2:
    if selected_type == 'Movie' and 'duration' in filtered_data.columns:
        try:
            duration = filtered_data['duration'].str.extract(r'(\d+)').astype(float)
            avg_duration = duration.mean()
            st.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{avg_duration:.1f} –º–∏–Ω" if pd.notna(avg_duration) else "N/A")
        except:
            st.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "N/A")
    else:
        st.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "N/A")

with col3:
    release_year = filtered_data['release_year'].min() if not filtered_data.empty else "N/A"
    st.metric("–°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ä–µ–ª–∏–∑", release_year)

st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º")
if not filtered_data.empty and 'rating' in filtered_data.columns:
    try:
        fig, ax = plt.subplots()
        filtered_data['rating'].value_counts().plot(kind='bar', ax=ax)
        st.pyplot(fig)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {str(e)}")
else:
    st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")


st.subheader("–¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö")
columns_to_show = ['title', 'type', 'release_year', 'country', 'duration']
available_columns = [col for col in columns_to_show if col in filtered_data.columns]
if available_columns:
    st.dataframe(
        filtered_data[available_columns],
        height=400,
        use_container_width=True
    )
else:
    st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")


if show_stats:
    st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    if not filtered_data.empty and 'country' in filtered_data.columns:
        try:
            st.write("–¢–æ–ø-10 —Å—Ç—Ä–∞–Ω –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É:")
            st.bar_chart(filtered_data['country'].value_counts().head(10))
        except Exception as e:
            st.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    else:
        st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")