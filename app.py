import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import os

st.set_page_config(page_title="Netflix Analytics", layout="wide")

@st.cache_data
def load_data():
    try:
        file_path = 'data/netflix_titles.csv'
        if not os.path.exists(file_path):
            st.error(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return pd.DataFrame()
        df = pd.read_csv(file_path)
        if 'country' not in df.columns:
            df['country'] = 'Unknown'
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        return pd.DataFrame()

df = load_data()

if not isinstance(df, pd.DataFrame):
    st.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DataFrame")
    st.stop()

st.title("üìä Netflix Content Analysis Dashboard")
st.markdown("""
–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ Netflix —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ Kaggle.
* –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: [Netflix Movies and TV Shows](https://www.kaggle.com/datasets/shivamb/netflix-shows)
* –ê–≤—Ç–æ—Ä: [ast_57]
""")

with st.sidebar:
    st.header("–§–∏–ª—å—Ç—Ä—ã")
    
    min_year = 1925
    max_year = 2022
    
    if not df.empty and 'release_year' in df.columns:
        min_year = int(df['release_year'].min())
        max_year = int(df['release_year'].max())

    year_range = st.slider(
        "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞",
        min_year, max_year,
        (min_year, max_year)
    )
    
    countries = ['All'] + sorted(df['country'].dropna().unique().tolist()) if 'country' in df.columns else ['All']
    selected_countries = st.multiselect(
        "–°—Ç—Ä–∞–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
        options=countries,
        default=['All']
    )

    selected_type = st.selectbox("–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞", options=['All', 'Movie', 'TV Show'])
    
    show_stats = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")

try:
    filtered_data = df.copy()
    
    if selected_type != 'All':
        filtered_data = filtered_data[filtered_data['type'] == selected_type]
    
    filtered_data = filtered_data[
        filtered_data['release_year'].between(year_range[0], year_range[1])
    ]
    
    if 'All' not in selected_countries and 'country' in filtered_data.columns:
        filtered_data = filtered_data[filtered_data['country'].isin(selected_countries)]
    
    if search_query and 'title' in filtered_data.columns:
        filtered_data = filtered_data[
            filtered_data['title'].str.contains(search_query, case=False, na=False)
        ]

except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
    filtered_data = df.copy()

col1, col2, col3 = st.columns(3)
with col1:
    st.metric("–í—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", len(filtered_data))

with col2:
    if selected_type == 'Movie' and 'duration' in filtered_data.columns:
        try:
            duration = filtered_data['duration'].str.extract(r'(\d+)')[0].astype(float)
            avg_duration = duration.mean()
            st.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{avg_duration:.1f} –º–∏–Ω" if pd.notna(avg_duration) else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            st.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {str(e)}")
    else:
        st.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ")

with col3:
    release_year = filtered_data['release_year'].min() if not filtered_data.empty else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    st.metric("–°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ä–µ–ª–∏–∑", release_year)

if show_stats and not filtered_data.empty:
    st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    type_counts = filtered_data['type'].value_counts()
    st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**")
    st.write(f"- –§–∏–ª—å–º—ã: {type_counts.get('Movie', 0)}")
    st.write(f"- –°–µ—Ä–∏–∞–ª—ã: {type_counts.get('TV Show', 0)}")
    
    if 'release_year' in filtered_data.columns:
        avg_year = filtered_data['release_year'].mean()
        st.write(f"**–°—Ä–µ–¥–Ω–∏–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:** {avg_year:.1f}" if pd.notna(avg_year) else "**–°—Ä–µ–¥–Ω–∏–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:** –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    if 'listed_in' in filtered_data.columns:
        genres_list = [genre.strip() for genres in filtered_data['listed_in'].dropna() for genre in genres.split(', ')]
        genre_counts = pd.Series(genres_list).value_counts().head(5)
        st.write("**–¢–æ–ø-5 –∂–∞–Ω—Ä–æ–≤:**")
        for genre, count in genre_counts.items():
            st.write(f"- {genre}: {count}")

st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º")
if not filtered_data.empty and 'rating' in filtered_data.columns:
    try:
        fig, ax = plt.subplots(figsize=(10, 6))
        ratings = filtered_data['rating'].value_counts()
        ratings.plot(kind='bar', ax=ax, color='teal', edgecolor='black')
        ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º", fontsize=16, pad=10)
        ax.set_xlabel("–†–µ–π—Ç–∏–Ω–≥", fontsize=12)
        ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", fontsize=12)
        ax.grid(True, axis='y', linestyle='--', alpha=0.7)
        plt.xticks(rotation=45, ha="right")
        plt.tight_layout()
        st.pyplot(fig)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {str(e)}")
else:
    st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")

st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
if not filtered_data.empty:
    st.write(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_data)} –∑–∞–ø–∏—Å–µ–π")
    
    if 'selected_title' not in st.session_state:
        st.session_state.selected_title = None

    selected_row = st.dataframe(
        filtered_data,
        on_select="rerun",
        selection_mode="single-row",
        use_container_width=True
    )

    if selected_row['selection']['rows']:
        selected_index = selected_row['selection']['rows'][0]
        st.session_state.selected_title = filtered_data.iloc[selected_index]['title']

    if st.session_state.selected_title:
        st.subheader(f"–î–µ—Ç–∞–ª–∏: {st.session_state.selected_title}")
        selected_data = filtered_data[filtered_data['title'] == st.session_state.selected_title].iloc[2]
        
        col1, col2 = st.columns([2, 1])
        with col1:
            st.markdown(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {selected_data.get('title', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
            st.markdown(f"**–¢–∏–ø:** {selected_data.get('type', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
            st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {selected_data.get('description', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
            st.markdown(f"**–ñ–∞–Ω—Ä—ã:** {selected_data.get('listed_in', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
            st.markdown(f"**–ê–∫—Ç–µ—Ä—ã:** {selected_data.get('cast', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
            st.markdown(f"**–†–µ–∂–∏—Å—Å–µ—Ä:** {selected_data.get('director', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
        with col2:
            st.markdown(f"**–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:** {selected_data.get('release_year', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
            st.markdown(f"**–†–µ–π—Ç–∏–Ω–≥:** {selected_data.get('rating', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
            st.markdown(f"**–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {selected_data.get('duration', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
            st.markdown(f"**–°—Ç—Ä–∞–Ω–∞:** {selected_data.get('country', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
        
        if st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É"):
            st.session_state.selected_title = None
            st.rerun()

else:
    st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º.")